LINKED LIST
-------------
--------------

What are Linked Lists?
----------------------

A linked list is a linear data structure used to store a collection of elements called nodes. Unlike arrays, linked lists do not store elements in contiguous memory locations. Instead, they consist of a chain of nodes, where each node holds a value (or data) and a reference (or link) to the next node in the sequence.

Key Concepts
-------------

Here are some key concepts associated with linked lists:

Node:
-------
A node is the basic building block of a linked list. It contains two parts:

Data:
------
The actual value or information that the node holds.
Next (or Link): A reference (or pointer) to the next node in the list. In a singly linked list, this points to the next node; in a doubly linked list, it points to both the next and previous nodes.
Head: The head is the first node in the linked list. It serves as the starting point for accessing the list's elements.

Tail:
------
The tail is the last node in the linked list. In some implementations, it can optimize certain operations like appending elements to the list.

Types of Linked Lists:
-----------------------

There are several types of linked lists, including:

Singly Linked List:
-------------------
In a singly linked list, each node has a data element and a reference to the next node. It forms a unidirectional chain of nodes.

Doubly Linked List:
--------------------
In a doubly linked list, each node has a data element and references to both the next and previous nodes. It allows for bidirectional traversal.

Circular Linked List:
---------------------
A circular linked list is a variation where the last node points back to the first node, creating a loop.

Advantages of Linked Lists:
--------------------------

Dynamic Size: 
---------------
Linked lists can dynamically grow or shrink in size, making them flexible.
Insertion and Deletion: Inserting or deleting nodes can be more efficient in linked lists than in arrays because it involves adjusting references rather than shifting elements.
No Fixed Memory Allocation: Linked lists do not require contiguous memory allocation.

Disadvantages of Linked Lists:
-----------------------------

Random Access: 
----------------
Unlike arrays, linked lists do not support direct access to elements by index. Traversal from the head is required.

Extra Memory: 
-------------
Each node in a linked list requires extra memory to store the reference, which can be less memory-efficient than arrays for small elements.



Example of a Singly Linked List:
--------------------------------

Head -> [10] -> [20] -> [30] -> [40] -> None
In this example, the head points to the first node with data 10, and each node has a link to the next node. The last node has a link of None, indicating the end of the list.

Linked lists are fundamental data structures in computer science and are widely used in many applications, including implementing dynamic data structures like stacks, queues, and more. Understanding linked lists is a crucial step in mastering data structures.


Doubly Linked Lists:
---------------------

A doubly linked list is an extension of a singly linked list where each node has references to both the next and previous nodes. This bidirectional linkage allows for more efficient traversal in both directions. Here are key aspects of doubly linked lists:

Node Structure:
----------------
In a doubly linked list, each node has three components:

Data:
-------
The actual value or information stored in the node.
Next: 
-----
A reference to the next node in the list.
Previous:
---------
A reference to the previous node in the list.


Advantages:
-------------

Bidirectional Traversal: Unlike singly linked lists, you can traverse a doubly linked list forwards and backward, making it suitable for applications that require such traversal, such as text editors for undo/redo functionality.
Efficient Insertion and Deletion: Insertions and deletions are more efficient since you have references to both the previous and next nodes. No need to traverse the list to find the previous node.

Use Cases:
----------

Doubly linked lists are often used in applications where elements need to be accessed in both directions, such as music playlists (next and previous songs) or navigating through web pages (forward and backward).


Circular Linked Lists:
-----------------------

A circular linked list is a variation of linked lists where the last node points back to the first node, creating a loop. Here are key aspects of circular linked lists:

Node Structure: Similar to singly and doubly linked lists, each node in a circular linked list contains data and a reference (next in the case of singly circular linked lists or both next and previous in the case of doubly circular linked lists).

Advantages:
-----------

Efficient Circular Operations: Circular linked lists are well-suited for applications involving cyclic or repetitive operations. For example, scheduling algorithms or round-robin task management in operating systems.

Use Cases:
-----------

Circular linked lists are used when you need to create a looping structure or when you want to efficiently manage a circular queue of items.


Example of a Doubly Circular Linked List:
------------------------------------------

Consider a doubly circular linked list containing integers:

Head <-> [10] <-> [20] <-> [30] <-> [40] <-> Head


In this example, "Head" refers to the first node, and each node has references to both the next and previous nodes. The last node points back to the first node, creating a circular structure.

Understanding the differences between these linked list types and their use cases is crucial when designing data structures or solving problems that require specific traversal or circular operations. Both doubly linked lists and circular linked lists have their unique advantages in various scenarios.













